jacoco {
    toolVersion = "0.8.7"
}

// Add because getting build fail error like below, due to that wont able produce code coverage, so added it
/*
Execution failed for task ':app:createDebugAndroidTestCoverageReport'.

> A failure occurred while executing com.android.build.gradle.internal.coverage.JacocoReportTask$JacocoReportWorkerAction

        >Unable to generate Jacoco report
*/
configurations.all{
    resolutionStrategy {
        eachDependency { details ->
            if ('org.jacoco' == details.requested.group) {
                details.useVersion "0.8.7"
            }
        }
    }
}

tasks.withType(Test) {
    enabled = System.getProperty("java.specification.version") != "9"
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}


task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest'/*, 'createDebugCoverageReport'*/]) {

    reports {
        csv.enabled = true
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = [
            // data binding
            'android/databinding/**/*.class',
            '**/android/databinding/*Binding.class',
            '**/android/databinding/*',
            '**/androidx/databinding/*',
            '**/BR.*',
            // android
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            '**/*$[0-9].*',
            // butterKnife
            '**/*$ViewInjector*.*',
            '**/*$ViewBinder*.*',
            // dagger
            '**/*_MembersInjector.class',
            '**/Dagger*Component.class',
            '**/Dagger*Component$Builder.class',
            '**/*Module_*Factory.class',
            '**/di/module/*',
            '**/*_Factory*.*',
            '**/*Module*.*',
            '**/*Dagger*.*',
            '**/*Hilt*.*',
            // kotlin
            '**/*MapperImpl*.*',
            '**/*$ViewInjector*.*',
            '**/*$ViewBinder*.*',
            '**/BuildConfig.*',
            '**/*Component*.*',
            '**/*BR*.*',
            '**/Manifest*.*',
            '**/*$Lambda$*.*',
            '**/*Companion*.*',
            '**/*Module*.*',
            '**/*Dagger*.*',
            '**/*Hilt*.*',
            '**/*MembersInjector*.*',
            '**/*_MembersInjector.class',
            '**/*_Factory*.*',
            '**/*_Provide*Factory*.*',
            '**/*Extensions*.*',
            // sealed and data classes
            '**/*$Result.*',
            '**/*$Result$*.*'
    ]

    /*
       below is the main place where we can actually control files that we want
       to exclude from our report. classDirectories is the place where
       we specify our compiled classes and if we want to remove R.claass from
       code coverage report we just need filter it out using (Gradle fileTree concept working with files)
    */

    def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))    //Path to your kotlin source code of your module.
    classDirectories.setFrom(files([debugTree]))
    /*
       below we describe path to test run reports needed for JaCoCo
       to generate report based on your last test run that are stored
       within your module build folder.
    */
    executionData.setFrom(fileTree(dir: "$project.buildDir", includes: [
            //'jacoco/testDebugUnitTest.exec',
            'outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec'
                     // 'outputs/code_coverage/debugAndroidTest/connected/**/*.ec'
    ]))
}
